# type: Subject
# type; a commit must be one of the approved types listed below
# Subject; 30 characters; see below. 30CharsEndsHere.


# Blank line between type and body.

# body: More detailed explanatory text, if necessary, that explain *what* and *why* NOT *how*. Wrap it to about 72 characters which is here:  			#
 

# Blank line between body and footer.

# footer: optional; see below

# NOTES
# The Type
#	The type is contained within the title and can be one of these types:
#	
#	feat: A new feature
#	fix: A bug fix (for example, fix: issue #123 )
#	docs: Changes to documentation
#	style: Formatting, missing semi colons, etc; no code change
#	refactor: Refactoring production code
#	test: Adding tests, refactoring test; no production code change
#	chore: Updating build tasks, package manager configs, etc; no production code 
# change

# The Subject
# Subjects should be no greater than 30 characters, should begin with a capital 
# letter and do not end with a period. Use an imperative tone to describe what a 
# commit does, rather than what it did. For example, use change; not changed or 
# changes.

# The Body
# Not all commits are complex enough to warrant a body, therefore it is optional 
# and only used when a commit requires a bit of explanation and context. Use the 
# body to explain the what and why of a commit, not the how.When writing a body, 
# the blank line between the title and the body is required and you should limit 
# the length of each line to no more than 72 characters.

# The Footer
# Optional section used to list co-authors, reference related issue IDs, etc. Use 
# list format, for example: 
# - Co-authored-by: name <user@users.noreply.github.com>
# - See also #456, #789
# - [Udacity Git Commit Message Style Guide](udacity.github.io/git-styleguide/)
# - [When to make a Git commit](https://jasonmccreary.me)
# - [How to Write a Git Commit Message ](https://cbea.ms/git-commit/)
# - [Better Commit Messages With Gitmessage template](https://thoughtbot.com/blog)
